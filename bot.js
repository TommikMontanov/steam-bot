const { Telegraf, Markup } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const SteamUser = require('steam-user');
const SteamCommunity = require('steamcommunity');
const http = require('http');
const https = require('https');
const fs = require('fs');

require('dotenv').config();

console.log('BOT_TOKEN:', process.env.BOT_TOKEN);

const bot = new Telegraf(process.env.BOT_TOKEN);

const userSessions = {};
const levelCache = {};
let appListCache = {};

const popularApps = {
  730: 'Counter-Strike 2',
  440: 'Team Fortress 2',
  570: 'Dota 2',
  271590: 'Grand Theft Auto V',
  1172470: 'Apex Legends',
  444090: 'Paladins',
  252490: 'Rust',
  4000: 'Garry\'s Mod',
  550: 'Left 4 Dead 2',
  578080: 'PUBG: BATTLEGROUNDS'
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
try {
  if (fs.existsSync('app_cache.json')) {
    appListCache = JSON.parse(fs.readFileSync('app_cache.json', 'utf8'));
    console.log('[INFO] Loaded app cache from app_cache.json');
  }
} catch (err) {
  console.error('[APP CACHE LOAD ERROR]', err);
}

async function getAppName(community, appid) {
  if (popularApps[appid]) {
    return popularApps[appid];
  }
  if (appListCache[appid]) {
    return appListCache[appid];
  }
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º Steam Web API
    const response = await new Promise((resolve, reject) => {
      community.httpRequestGet(
        'https://api.steampowered.com/ISteamApps/GetAppList/v2/',
        (err, response, body) => {
          if (err) return reject(err);
          try {
            const data = JSON.parse(body);
            resolve(data);
          } catch (e) {
            reject(e);
          }
        }
      );
    });
    const apps = response.applist.apps;
    for (const app of apps) {
      appListCache[app.appid] = app.name;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
    try {
      fs.writeFileSync('app_cache.json', JSON.stringify(appListCache, null, 2));
      console.log('[INFO] Saved app cache to app_cache.json');
    } catch (err) {
      console.error('[APP CACHE SAVE ERROR]', err);
    }
    return appListCache[appid] || `AppID ${appid} (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)`;
  } catch (err) {
    console.error('[APP LIST ERROR]', err);
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Steam Store API
    try {
      const storeResponse = await new Promise((resolve, reject) => {
        community.httpRequestGet(
          `https://store.steampowered.com/api/appdetails?appids=${appid}`,
          (err, response, body) => {
            if (err) return reject(err);
            try {
              const data = JSON.parse(body);
              resolve(data);
            } catch (e) {
              reject(e);
            }
          }
        );
      });
      const appData = storeResponse[appid]?.data;
      if (appData?.name) {
        appListCache[appid] = appData.name;
        fs.writeFileSync('app_cache.json', JSON.stringify(appListCache, null, 2));
        console.log('[INFO] Saved app cache to app_cache.json from store API');
        return appData.name;
      }
      return `AppID ${appid} (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)`;
    } catch (storeErr) {
      console.error('[STORE API ERROR]', storeErr);
      return `AppID ${appid} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è)`;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±-—Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ steam-user
function startWebLogOnInterval(chatId, client, community) {
  // –í—ã–∑—ã–≤–∞–µ–º webLogOn —Å—Ä–∞–∑—É
  client.webLogOn((err) => {
    if (err) {
      console.error(`[WEBLOGON –û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π webLogOn –¥–ª—è chatId: ${chatId}`, err);
    } else {
      console.log(`[INFO] –ù–∞—á–∞–ª—å–Ω—ã–π webLogOn —É—Å–ø–µ—à–µ–Ω –¥–ª—è chatId: ${chatId}`);
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—É–∫–∏ —Å community
      community.setCookies(client._sessionCookies || []);
    }
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ webLogOn –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  const interval = setInterval(() => {
    if (!userSessions[chatId] || !userSessions[chatId].steamClient.steamID) {
      clearInterval(interval);
      console.log(`[INFO] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª webLogOn –¥–ª—è chatId: ${chatId}`);
      return;
    }
    client.webLogOn((err) => {
      if (err) {
        console.error(`[WEBLOGON –û–®–ò–ë–ö–ê] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π webLogOn –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è chatId: ${chatId}`, err);
      } else {
        console.log(`[INFO] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π webLogOn —É—Å–ø–µ—à–µ–Ω –¥–ª—è chatId: ${chatId}`);
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—É–∫–∏ —Å community
        community.setCookies(client._sessionCookies || []);
      }
    });
  }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ userSessions –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
  userSessions[chatId].webLogOnInterval = interval;
}

bot.use(new LocalSession({ database: 'sessions.json' }).middleware());

bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Steam –∏ —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.',
    Markup.keyboard([
      ['üîë –í–æ–π—Ç–∏', 'üìä –°—Ç–∞—Ç—É—Å'],
      ['üöÄ –°—Ç–∞—Ä—Ç', 'üõë –°—Ç–æ–ø'],
      ['üö™ –í—ã–π—Ç–∏']
    ]).resize()
  );
});

bot.hears('üîë –í–æ–π—Ç–∏', (ctx) => {
  const chatId = ctx.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 if (ctx.session.loggedIn && userSessions[chatId]?.steamClient?.steamID) {
    ctx.reply('‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ Steam. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã "üìä –°—Ç–∞—Ç—É—Å", "üöÄ –°—Ç–∞—Ä—Ç" –∏–ª–∏ "üö™ –í—ã–π—Ç–∏".');
    return;
  }

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
  if (userSessions[chatId]) {
    userSessions[chatId].steamClient.logOff();
    if (userSessions[chatId].webLogOnInterval) {
      clearInterval(userSessions[chatId].webLogOnInterval);
    }
    delete userSessions[chatId];
  }

  ctx.session = {
    step: 'awaiting_login',
    loggedIn: false,
    currentAppID: null
  };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam:');
  console.log(`[DEBUG] –í—Ö–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è chatId: ${chatId}, session:`, ctx.session);
});

bot.hears('üìä –°—Ç–∞—Ç—É—Å', async (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;
  const community = userSessions[chatId]?.community;

  if (!session.loggedIn || !client || !client.steamID || !community) {
    return ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîë –í–æ–π—Ç–∏".');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SteamCommunity
    let onlineState = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let level = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    try {
      const user = await new Promise((resolve, reject) => {
        community.getSteamUser(client.steamID, (err, user) => {
          if (err) reject(err);
          else resolve(user);
        });
      });
      console.log('[DEBUG] getSteamUser response for chatId:', chatId, user);
      onlineState = user?.onlineState === 'online' ? '–û–Ω–ª–∞–π–Ω' : user?.onlineState || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

      // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ Steam Web API
      const steamID = client.steamID.toString();
      if (levelCache[steamID]) {
        level = levelCache[steamID];
      } else {
        const steamApiKey = process.env.STEAM_API_KEY;
        if (steamApiKey) {
          const levelResponse = await new Promise((resolve, reject) => {
            community.httpRequestGet(
              `https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=${steamApiKey}&steamid=${steamID}`,
              (err, response, body) => {
                if (err) return reject(err);
                try {
                  const data = JSON.parse(body);
                  resolve(data.response.player_level);
                } catch (e) {
                  reject(e);
                }
              }
            );
          });
          level = levelResponse ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          if (typeof level === 'number') {
            levelCache[steamID] = level;
          }
        } else {
          console.error('[LEVEL ERROR] Steam API key is missing for chatId:', chatId);
        }
      }
    } catch (err) {
      console.error('[LEVEL ERROR] for chatId:', chatId, err);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
    const friends = client.myFriends || {};
    const friendIDs = Object.keys(friends).filter(id => friends[id] === SteamUser.EFriendRelationship.Friend);
    console.log('[DEBUG] friendIDs for chatId:', chatId, friendIDs);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('[DEBUG] client.personaState for chatId:', chatId, client.personaState);
    let msg = `üìä <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n` +
              `‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${level}\n` +
              `üë• –î—Ä—É–∑–µ–π: ${friendIDs.length}\n`;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–º—è –¥—Ä—É–∑–µ–π
    if (friendIDs.length > 0) {
      try {
        const limitedFriendIDs = friendIDs.slice(0, 25);
        const personas = await new Promise((resolve, reject) => {
          client.getPersonas(limitedFriendIDs, (err, personas) => {
            if (err) reject(err);
            else resolve(personas);
          });
        });

        let onlineFriendsCount = 0;
        let friendNames = [];
        if (personas && typeof personas === 'object') {
          for (const id of limitedFriendIDs) {
            if (personas[id]?.persona_state === 1) {
              onlineFriendsCount++;
              if (personas[id]?.player_name) {
                friendNames.push(personas[id].player_name);
              }
            }
          }
          msg += `üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: ${onlineFriendsCount > 0 ? onlineFriendsCount + ' (' + friendNames.join(', ') + ')' : '–ù–µ—Ç'}\n`;
        } else {
          msg += `üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
          console.log('[DEBUG] Personas is invalid for chatId:', chatId, personas);
        }
      } catch (err) {
        console.error('[PERSONAS ERROR] for chatId:', chatId, err);
        msg += `üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }
    } else {
      msg += `üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: –ù–µ—Ç\n`;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('[DEBUG] playingAppIDs:', client.playingAppIDs, 'richPresence:', client.richPresence, 'session.currentAppID:', session.currentAppID, 'chatId:', chatId);
    let status = onlineState;
    if (session.currentAppID) {
      status = await getAppName(community, session.currentAppID);
    }

    msg += `üéÆ –°—Ç–∞—Ç—É—Å: ${status}`;

    ctx.reply(msg, { parse_mode: 'HTML' });

  } catch (e) {
    console.error('[STATUS ERROR] for chatId:', chatId, e);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

bot.hears('üöÄ –°—Ç–∞—Ä—Ç', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client) {
    ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ Steam –∫–æ–º–∞–Ω–¥–æ–π "üîë –í–æ–π—Ç–∏".');
    return;
  }

  session.step = 'awaiting_appid';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ AppID –∏–≥—Ä—ã –¥–ª—è —Ñ–∞—Ä–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 730 –¥–ª—è CS2):');
  console.log(`[DEBUG] Start command initiated for chatId: ${chatId}`);
});

bot.hears('üõë –°—Ç–æ–ø', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client) {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Steam.');
    return;
  }

  client.gamesPlayed([]);
  session.currentAppID = null;
  ctx.reply('üõë –§–∞—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  console.log(`[DEBUG] Game stopped for chatId: ${chatId}`);
});

bot.hears('üö™ –í—ã–π—Ç–∏', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (client) {
    client.logOff();
    if (userSessions[chatId]?.webLogOnInterval) {
      clearInterval(userSessions[chatId].webLogOnInterval);
    }
    delete userSessions[chatId];
    session.loggedIn = false;
    session.step = null;
    session.currentAppID = null;
    ctx.reply('üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam.');
    console.log(`[DEBUG] User logged out for chatId: ${chatId}`);
  } else {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
  }
});

bot.on('text', async (ctx) => {
  const chatId = ctx.chat.id;
  const step = ctx.session.step;

  console.log(`[DEBUG] Text received for chatId: ${chatId}, step: ${step}, message: ${ctx.message.text}`);

  if (step === 'awaiting_login') {
    ctx.session.login = ctx.message.text;
    ctx.session.step = 'awaiting_password';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Steam:');
    console.log(`[DEBUG] Login received for chatId: ${chatId}, login: ${ctx.session.login}, new step: ${ctx.session.step}`);
  } else if (step === 'awaiting_password') {
    const login = ctx.session.login;
    const password = ctx.message.text;

    const client = new SteamUser({ 
      promptSteamGuardCode: false, 
      httpTimeout: 30000,
      protocol: SteamUser.EConnectionProtocol.TCP
    });
    const community = new SteamCommunity();

    userSessions[chatId] = { steamClient: client, community };

    const loginTimeout = setTimeout(() => {
      ctx.reply('‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ö–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".');
      client.logOff();
      if (userSessions[chatId]?.webLogOnInterval) {
        clearInterval(userSessions[chatId].webLogOnInterval);
      }
      delete userSessions[chatId];
      ctx.session.loggedIn = false;
      ctx.session.step = null;
      console.log(`[DEBUG] Login timeout for chatId: ${chatId}`);
    }, 60000);

    client.on('loggedOn', () => {
      clearTimeout(loginTimeout);
      ctx.session.loggedIn = true;
      ctx.session.step = null;
      client.setPersona(SteamUser.EPersonaState.Online);
      console.log('[DEBUG] Logged on, personaState:', client.personaState, 'steamID:', client.steamID?.toString());
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º webLogOn –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      startWebLogOnInterval(chatId, client, community);
      
      ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ Steam!');
      console.log(`[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${login} –≤–æ—à—ë–ª –≤ Steam (chatId: ${chatId})`);
    });

    client.on('playingState', (blocked, playingApp) => {
      console.log(`[DEBUG] Playing state changed for chatId: ${chatId}, blocked: ${blocked}, playingApp: ${playingApp}`);
    });

    client.on('steamGuard', (domain, callback) => {
      clearTimeout(loginTimeout);
      ctx.session.guardCallback = callback;
      ctx.session.step = 'awaiting_guard';
      ctx.reply(`üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Steam Guard${domain ? ' –∏–∑ –ø–æ—á—Ç—ã ' + domain : ' –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'}:`);
      console.log(`[DEBUG] Steam Guard requested for chatId: ${chatId}, domain: ${domain}`);

      const guardTimeout = setTimeout(() => {
        ctx.reply('‚ùå –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Steam Guard –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".');
        client.logOff();
        if (userSessions[chatId]?.webLogOnInterval) {
          clearInterval(userSessions[chatId].webLogOnInterval);
        }
        delete userSessions[chatId];
        ctx.session.loggedIn = false;
        ctx.session.step = null;
        console.log(`[DEBUG] Steam Guard timeout for chatId: ${chatId}`);
      }, 30000);

      ctx.session.guardTimeout = guardTimeout;
    });

    client.on('error', (err) => {
      clearTimeout(loginTimeout);
      ctx.session.loggedIn = false;
      ctx.session.step = null;
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${err.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".`);
      client.logOff();
      if (userSessions[chatId]?.webLogOnInterval) {
        clearInterval(userSessions[chatId].webLogOnInterval);
      }
      delete userSessions[chatId];
      console.log(`[DEBUG] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è chatId: ${chatId}: ${err.message}`);
    });

    client.on('disconnected', (eresult, msg) => {
      clearTimeout(loginTimeout);
      ctx.session.loggedIn = false;
      ctx.session.step = null;
      ctx.reply(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Steam –ø–æ—Ç–µ—Ä—è–Ω–æ: ${msg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".`);
      if (userSessions[chatId]?.webLogOnInterval) {
        clearInterval(userSessions[chatId].webLogOnInterval);
      }
      delete userSessions[chatId];
      console.log(`[DEBUG] Disconnected –¥–ª—è chatId: ${chatId}: eresult=${eresult}, msg=${msg}`);
    });

    try {
      client.logOn({
        accountName: login,
        password: password
      });
      ctx.reply('‚è≥ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');
      console.log(`[DEBUG] Attempting login for chatId: ${chatId}, login: ${login}`);
    } catch (err) {
      clearTimeout(loginTimeout);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".');
      console.log(`[DEBUG] Login attempt error for chatId: ${chatId}: ${err.message}`);
    }
  } else if (step === 'awaiting_guard') {
    const code = ctx.message.text;
    if (ctx.session.guardCallback) {
      clearTimeout(ctx.session.guardTimeout);
      ctx.session.guardCallback(code);
      ctx.session.step = null;
      ctx.reply('‚úÖ –ö–æ–¥ Steam Guard –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—Ö–æ–¥...');
      console.log(`[DEBUG] Steam Guard code submitted for chatId: ${chatId}, code: ${code}`);
    } else {
      ctx.reply('‚ùå –û—à–∏–±–∫–∞: Steam Guard callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å "üîë –í–æ–π—Ç–∏".');
      ctx.session.step = null;
      console.log(`[DEBUG] No guard callback for chatId: ${chatId}`);
    }
  } else if (step === 'awaiting_appid') {
    const appid = parseInt(ctx.message.text);
    if (isNaN(appid) || appid <= 0) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π AppID. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 730 –¥–ª—è CS2).');
      console.log(`[DEBUG] Invalid AppID received for chatId: ${chatId}, input: ${ctx.message.text}`);
      return;
    }

    const client = userSessions[chatId]?.steamClient;
    const community = userSessions[chatId]?.community;

    if (!client || !community) {
      ctx.reply('‚ùå –ö–ª–∏–µ–Ω—Ç Steam –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
      ctx.session.step = null;
      ctx.session.loggedIn = false;
      console.log(`[DEBUG] No client found for chatId: ${chatId}`);
      return;
    }

    ctx.session.currentAppID = appid;
    client.gamesPlayed([appid]);
    console.log(`[DEBUG] Games played set to AppID: ${appid} for chatId: ${chatId}`);
    ctx.session.step = null;
    ctx.reply(`üéÆ –ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ —Å AppID ${appid} –¥–ª—è —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.`);
  } else {
    ctx.reply('‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "üîë –í–æ–π—Ç–∏".');
    console.log(`[DEBUG] No valid step for chatId: ${chatId}, session:`, ctx.session);
  }
});

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
const PORT = process.env.PORT || 3000;
const SELF_URL = 'https://steam-bot-g7ef.onrender.com';

http.createServer((req, res) => {
  res.writeHead(200);
  res.end('Bot is running');
}).listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});

// –ü–∏–Ω–≥ –¥–ª—è Render
setInterval(() => {
  https.get(SELF_URL, (res) => {
    console.log(`[Heartbeat] Status code: ${res.statusCode}`);
  }).on('error', (err) => {
    console.error(`[Heartbeat] –û—à–∏–±–∫–∞: ${err.message}`);
  });
}, 30 * 1000);

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
