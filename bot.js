const { Telegraf, session, Markup } = require('telegraf');
const SteamUser = require('steam-user');
const SteamCommunity = require('steamcommunity');
const http = require('http');
const https = require('https');


require('dotenv').config();

console.log('BOT_TOKEN:', process.env.BOT_TOKEN); // üëâ –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

const bot = new Telegraf(process.env.BOT_TOKEN);
const userSessions = {};

bot.use(session({ defaultSession: () => ({}) }));

bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Steam –∏ —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.',
    Markup.keyboard([
      ['üîë –í–æ–π—Ç–∏', 'üìä –°—Ç–∞—Ç—É—Å'],
      ['üöÄ –°—Ç–∞—Ä—Ç', 'üõë –°—Ç–æ–ø'],
      ['üö™ –í—ã–π—Ç–∏']
    ]).resize()
  );
});

bot.hears('üîë –í–æ–π—Ç–∏', (ctx) => {
  const chatId = ctx.chat.id;

  if (ctx.session.loggedIn) {
    ctx.reply('‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ Steam. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã "üìä –°—Ç–∞—Ç—É—Å", "üöÄ –°—Ç–∞—Ä—Ç" –∏–ª–∏ "üö™ –í—ã–π—Ç–∏".');
    return;
  }

  ctx.session = {
    step: 'awaiting_login',
    loggedIn: false,
  };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam:');
  console.log(`[DEBUG] –í—Ö–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è chatId: ${chatId}`);
});

bot.hears('üìä –°—Ç–∞—Ç—É—Å', async (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client?.steamID) {
    ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í–æ–π—Ç–∏".');
    return;
  }

  const personaStates = {
    0: '–û—Ñ—Ñ–ª–∞–π–Ω',
    1: '–û–Ω–ª–∞–π–Ω',
    2: '–ó–∞–Ω—è—Ç',
    3: '–ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ',
    4: '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å',
    5: '–°–ø–∏—Ç',
    6: '–ò–≥—Ä–∞–µ—Ç',
  };

  try {
    const level = await new Promise((resolve, reject) => {
      client.getSteamLevel((err, level) => {
        if (err) reject(err);
        else resolve(level);
      });
    });

    const friendIDs = Object.keys(client.myFriends || {});
    const friendsCount = friendIDs.length;
    const onlineFriends = friendIDs.filter(id => client.users[id]?.persona?.state === 1).map(id => client.users[id].player_name || id);

    const state = personaStates[client.personaState] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    let game = '–ù–µ—Ç';
    if (client.richPresence && client.richPresence.length > 0) {
      game = client.richPresence[0]?.name || '–ò–≥—Ä–∞';
    } else if (client.playingAppIDs && client.playingAppIDs.length > 0) {
      game = `AppID ${client.playingAppIDs[0]}`;
    }

    ctx.reply(`üìä <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
üîó –í —Å–µ—Ç–∏: ${state}
‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${level}
üë• –î—Ä—É–∑–µ–π: ${friendsCount}
üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: ${onlineFriends.length > 0 ? onlineFriends.length + ' (' + onlineFriends.join(', ') + ')' : '–ù–µ—Ç'}
üéÆ –ò–≥—Ä–∞: ${game}`, { parse_mode: 'HTML' });

  } catch (e) {
    console.log('[STATUS ERROR]', e.message);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

bot.hears('üöÄ –°—Ç–∞—Ä—Ç', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client) {
    ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ Steam –∫–æ–º–∞–Ω–¥–æ–π "üîë –í–æ–π—Ç–∏".');
    return;
  }

  session.step = 'awaiting_appid';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ AppID –∏–≥—Ä—ã –¥–ª—è —Ñ–∞—Ä–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 730 –¥–ª—è CS2):');
});

bot.hears('üõë –°—Ç–æ–ø', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client) {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Steam.');
    return;
  }

  client.gamesPlayed([]);
  ctx.reply('üõë –§–∞—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
});

bot.hears('üö™ –í—ã–π—Ç–∏', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (client) {
    client.logOff();
    delete userSessions[chatId];
    ctx.session.loggedIn = false;
    ctx.session.step = null;
    ctx.reply('üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam.');
  } else {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
  }
});

bot.on('text', (ctx) => {
  const step = ctx.session.step;
  const chatId = ctx.chat.id;

  if (step === 'awaiting_login') {
    ctx.session.login = ctx.message.text;
    ctx.session.step = 'awaiting_password';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Steam:');

  } else if (step === 'awaiting_password') {
    const login = ctx.session.login;
    const password = ctx.message.text;

    const client = new SteamUser();
    const community = new SteamCommunity();

    userSessions[chatId] = { steamClient: client, community };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SteamUser
    client.on('loggedOn', () => {
      ctx.session.loggedIn = true;
      ctx.session.step = null;
      client.setPersona(SteamUser.EPersonaState.Online);
      ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ Steam!');
      console.log(`[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${login} –≤–æ—à—ë–ª –≤ Steam (chatId: ${chatId})`);
    });

    client.on('steamGuard', (domain, callback) => {
      ctx.session.guardCallback = callback;
      ctx.session.step = 'awaiting_guard';
      ctx.reply(`üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Steam Guard${domain ? ' –∏–∑ –ø–æ—á—Ç—ã ' + domain : ''}:`);
    });

    client.on('error', (err) => {
      ctx.session.loggedIn = false;
      ctx.session.step = null;
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + err.message);
      delete userSessions[chatId];
      console.log(`[DEBUG] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è chatId ${chatId}: ${err.message}`);
    });

    client.logOn({
      accountName: login,
      password: password
    });

    ctx.reply('‚è≥ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');

  } else if (step === 'awaiting_guard') {
    const code = ctx.message.text;
    if (ctx.session.guardCallback) {
      ctx.session.guardCallback(code);
      ctx.session.step = null;
      ctx.reply('‚úÖ –ö–æ–¥ Steam Guard –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—Ö–æ–¥...');
    }

  } else if (step === 'awaiting_appid') {
    const appid = parseInt(ctx.message.text);
    if (isNaN(appid)) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π AppID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
      return;
    }

    const client = userSessions[chatId]?.steamClient;

    if (!client) {
      ctx.reply('‚ùå –ö–ª–∏–µ–Ω—Ç Steam –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
      ctx.session.step = null;
      return;
    }

    client.gamesPlayed([appid]);
    ctx.session.step = null;
    ctx.reply(`üéÆ –ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ —Å AppID ${appid} –¥–ª—è —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.`);
  }
});


// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render.com –∑–Ω–∞–ª, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
const PORT = process.env.PORT || 3000;
const SELF_URL = 'https://steam-bot-kb0y.onrender.com'; // ‚Üê –£–∫–∞–∂–∏ —Ç—É—Ç —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞!

http.createServer((req, res) => {
  res.writeHead(200);
  res.end('Bot is running');
}).listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});

// –ü–∏–Ω–≥ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Render)
setInterval(() => {
  https.get(SELF_URL, (res) => {
    console.log(`[Heartbeat] Status code: ${res.statusCode}`);
  }).on('error', (err) => {
    console.error(`[Heartbeat] –û—à–∏–±–∫–∞: ${err.message}`);
  });
}, 30 * 1000);

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
