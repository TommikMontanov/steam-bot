const { Telegraf, session, Markup } = require('telegraf');
const SteamUser = require('steam-user');

require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
const userSessions = {};

bot.use(session({ defaultSession: () => ({}) }));

bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Steam –∏ —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.',
    Markup.keyboard([
      ['üîë –í–æ–π—Ç–∏', 'üìä –°—Ç–∞—Ç—É—Å'],
      ['üöÄ –°—Ç–∞—Ä—Ç', 'üõë –°—Ç–æ–ø'],
      ['üö™ –í—ã–π—Ç–∏']
    ]).resize()
  );
});

bot.hears('üîë –í–æ–π—Ç–∏', (ctx) => {
  ctx.session.step = 'awaiting_login';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç Steam:');
});

bot.hears('üìä –°—Ç–∞—Ç—É—Å', async (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client?.steamID) {
    ctx.reply('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í–æ–π—Ç–∏".');
    return;
  }

  const personaStates = {
    0: '–û—Ñ—Ñ–ª–∞–π–Ω',
    1: '–û–Ω–ª–∞–π–Ω',
    2: '–ó–∞–Ω—è—Ç',
    3: '–ù–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ',
    4: '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å',
    5: '–°–ø–∏—Ç',
    6: '–ò–≥—Ä–∞–µ—Ç',
  };

  let level = '?';
  let friends = 0;
  let onlineFriends = [];
  let state = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  let game = '–ù–µ—Ç';

  try {
  const getSteamLevelAsync = () => new Promise((resolve, reject) => {
    client.getSteamLevel((err, level) => {
      if (err) reject(err);
      else resolve(level);
    });
  });

  level = await getSteamLevelAsync();

  const friendIDs = Object.keys(client.myFriends || {});
  friends = friendIDs.length;

  for (let id of friendIDs) {
    const info = client.users[id];
    if (info?.persona?.state === 1) onlineFriends.push(info.player_name || id);
  }

  state = personaStates[client?.personaState || 0];

  if (client?.richPresence?.length > 0) {
    game = client.richPresence[0]?.name || '–ò–≥—Ä–∞';
  } else if (client?.playingAppIDs?.length > 0) {
    game = `AppID ${client.playingAppIDs[0]}`;
  }

} catch (e) {
  console.log('[STATUS ERROR]', e.message);
}

  ctx.reply(`üìä <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
üîó –í —Å–µ—Ç–∏: ${state}
‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${level}
üë• –î—Ä—É–∑–µ–π: ${friends}
üü¢ –û–Ω–ª–∞–π–Ω-–¥—Ä—É–∑–µ–π: ${onlineFriends.length > 0 ? onlineFriends.length + ' (' + onlineFriends.join(', ') + ')' : '–ù–µ—Ç'}
üéÆ –ò–≥—Ä–∞: ${game}`, { parse_mode: 'HTML' });
});

bot.hears('üöÄ –°—Ç–∞—Ä—Ç', async (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client?.steamID) {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Steam.');
    return;
  }

  ctx.session.step = 'awaiting_appid';
  ctx.reply('üì• –í–≤–µ–¥–∏—Ç–µ AppID –∏–≥—Ä—ã –¥–ª—è —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 730):');
});

bot.hears('üõë –°—Ç–æ–ø', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (!session.loggedIn || !client?.steamID) {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Steam.');
    return;
  }

  client.gamesPlayed([]);
  ctx.reply('üõë –§–∞—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
});

bot.hears('üö™ –í—ã–π—Ç–∏', (ctx) => {
  const chatId = ctx.chat.id;
  const session = ctx.session;
  const client = userSessions[chatId]?.steamClient;

  if (client) {
    client.logOff();
    delete userSessions[chatId];
    ctx.session.loggedIn = false;
    ctx.reply('üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam.');
  } else {
    ctx.reply('‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
  }
});

bot.on('text', async (ctx) => {
  const step = ctx.session.step;
  const chatId = ctx.chat.id;

  if (step === 'awaiting_login') {
    ctx.session.login = ctx.message.text;
    ctx.session.step = 'awaiting_password';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Steam:');
  } else if (step === 'awaiting_password') {
    const login = ctx.session.login;
    const password = ctx.message.text;

    const client = new SteamUser();
    userSessions[chatId] = { steamClient: client };

    client.logOn({
      accountName: login,
      password: password
    });

    client.on('loggedOn', () => {
      ctx.session.loggedIn = true;
      ctx.session.step = null;
      ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ Steam!');
    });

    client.on('steamGuard', (domain, callback) => {
      ctx.session.guardCallback = callback;
      ctx.session.step = 'awaiting_guard';
      ctx.reply(`üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Steam Guard${domain ? ' –∏–∑ –ø–æ—á—Ç—ã ' + domain : ''}:`);
    });

    client.on('error', (err) => {
      ctx.session.loggedIn = false;
      ctx.session.step = null;
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + err.message);
    });
  } else if (step === 'awaiting_guard') {
    const code = ctx.message.text;
    if (ctx.session.guardCallback) {
      ctx.session.guardCallback(code);
      ctx.session.step = null;
    }
  } else if (step === 'awaiting_appid') {
    const appid = parseInt(ctx.message.text);
    if (isNaN(appid)) {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π AppID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
      return;
    }

    const client = userSessions[chatId]?.steamClient;
    client.gamesPlayed([appid]);
    ctx.session.step = null;
    ctx.reply(`üéÆ –ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ —Å AppID ${appid} –¥–ª—è —Ñ–∞—Ä–º–∞ —á–∞—Å–æ–≤.`);
  }
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
